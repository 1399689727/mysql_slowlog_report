// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package jsondata

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson54c8071dDecodeGotestJsondataUser(in *jlexer.Lexer, out *User_obj) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c8071dEncodeGotestJsondataUser(out *jwriter.Writer, in User_obj) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User_obj) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c8071dEncodeGotestJsondataUser(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User_obj) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c8071dEncodeGotestJsondataUser(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User_obj) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c8071dDecodeGotestJsondataUser(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User_obj) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c8071dDecodeGotestJsondataUser(l, v)
}
func easyjson54c8071dDecodeGotestJsondataSLOWLOG(in *jlexer.Lexer, out *SLOWLOG_JSON) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "classes":
			if in.IsNull() {
				in.Skip()
				out.Classes = nil
			} else {
				in.Delim('[')
				if out.Classes == nil {
					if !in.IsDelim(']') {
						out.Classes = make([]Class_arr, 0, 1)
					} else {
						out.Classes = []Class_arr{}
					}
				} else {
					out.Classes = (out.Classes)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Class_arr
					(v1).UnmarshalEasyJSON(in)
					out.Classes = append(out.Classes, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "global":
			(out.Global).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c8071dEncodeGotestJsondataSLOWLOG(out *jwriter.Writer, in SLOWLOG_JSON) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"classes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Classes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Classes {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"global\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Global).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SLOWLOG_JSON) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c8071dEncodeGotestJsondataSLOWLOG(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SLOWLOG_JSON) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c8071dEncodeGotestJsondataSLOWLOG(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SLOWLOG_JSON) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c8071dDecodeGotestJsondataSLOWLOG(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SLOWLOG_JSON) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c8071dDecodeGotestJsondataSLOWLOG(l, v)
}
func easyjson54c8071dDecodeGotestJsondataQueryTime(in *jlexer.Lexer, out *Query_time_obj) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "avg":
			out.Avg = string(in.String())
		case "max":
			out.Max = string(in.String())
		case "min":
			out.Min = string(in.String())
		case "pct_95":
			out.Pct_95 = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c8071dEncodeGotestJsondataQueryTime(out *jwriter.Writer, in Query_time_obj) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"avg\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Avg))
	}
	{
		const prefix string = ",\"max\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Max))
	}
	{
		const prefix string = ",\"min\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Min))
	}
	{
		const prefix string = ",\"pct_95\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Pct_95))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Query_time_obj) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c8071dEncodeGotestJsondataQueryTime(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Query_time_obj) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c8071dEncodeGotestJsondataQueryTime(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Query_time_obj) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c8071dDecodeGotestJsondataQueryTime(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Query_time_obj) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c8071dDecodeGotestJsondataQueryTime(l, v)
}
func easyjson54c8071dDecodeGotestJsondataMetric(in *jlexer.Lexer, out *Metric_obj) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "db":
			(out.Dbs).UnmarshalEasyJSON(in)
		case "host":
			(out.Hosts).UnmarshalEasyJSON(in)
		case "user":
			(out.Users).UnmarshalEasyJSON(in)
		case "Query_time":
			(out.Query_time).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c8071dEncodeGotestJsondataMetric(out *jwriter.Writer, in Metric_obj) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"db\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Dbs).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"host\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Hosts).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Users).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Query_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Query_time).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Metric_obj) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c8071dEncodeGotestJsondataMetric(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Metric_obj) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c8071dEncodeGotestJsondataMetric(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Metric_obj) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c8071dDecodeGotestJsondataMetric(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Metric_obj) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c8071dDecodeGotestJsondataMetric(l, v)
}
func easyjson54c8071dDecodeGotestJsondataHost(in *jlexer.Lexer, out *Host_obj) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c8071dEncodeGotestJsondataHost(out *jwriter.Writer, in Host_obj) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Host_obj) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c8071dEncodeGotestJsondataHost(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Host_obj) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c8071dEncodeGotestJsondataHost(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Host_obj) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c8071dDecodeGotestJsondataHost(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Host_obj) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c8071dDecodeGotestJsondataHost(l, v)
}
func easyjson54c8071dDecodeGotestJsondataGlobal(in *jlexer.Lexer, out *Global_obj) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "query_count":
			out.Query_count = int(in.Int())
		case "unique_query_count":
			out.Unique_query_count = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c8071dEncodeGotestJsondataGlobal(out *jwriter.Writer, in Global_obj) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"query_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Query_count))
	}
	{
		const prefix string = ",\"unique_query_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Unique_query_count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Global_obj) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c8071dEncodeGotestJsondataGlobal(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Global_obj) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c8071dEncodeGotestJsondataGlobal(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Global_obj) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c8071dDecodeGotestJsondataGlobal(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Global_obj) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c8071dDecodeGotestJsondataGlobal(l, v)
}
func easyjson54c8071dDecodeGotestJsondataExample(in *jlexer.Lexer, out *Example_obj) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Query_time":
			out.Query_time = string(in.String())
		case "query":
			out.Query = string(in.String())
		case "ts":
			out.Ts = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c8071dEncodeGotestJsondataExample(out *jwriter.Writer, in Example_obj) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Query_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Query_time))
	}
	{
		const prefix string = ",\"query\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Query))
	}
	{
		const prefix string = ",\"ts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Ts))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Example_obj) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c8071dEncodeGotestJsondataExample(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Example_obj) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c8071dEncodeGotestJsondataExample(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Example_obj) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c8071dDecodeGotestJsondataExample(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Example_obj) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c8071dDecodeGotestJsondataExample(l, v)
}
func easyjson54c8071dDecodeGotestJsondataDb(in *jlexer.Lexer, out *Db_obj) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c8071dEncodeGotestJsondataDb(out *jwriter.Writer, in Db_obj) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Db_obj) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c8071dEncodeGotestJsondataDb(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Db_obj) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c8071dEncodeGotestJsondataDb(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Db_obj) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c8071dDecodeGotestJsondataDb(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Db_obj) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c8071dDecodeGotestJsondataDb(l, v)
}
func easyjson54c8071dDecodeGotestJsondataClass(in *jlexer.Lexer, out *Class_arr) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "attribute":
			out.Attribute = string(in.String())
		case "checksum":
			out.Checksum = string(in.String())
		case "example":
			(out.Examples).UnmarshalEasyJSON(in)
		case "query_count":
			out.Query_count = int(in.Int())
		case "ts_max":
			out.Ts_max = string(in.String())
		case "ts_min":
			out.Ts_min = string(in.String())
		case "metrics":
			(out.Metrics).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c8071dEncodeGotestJsondataClass(out *jwriter.Writer, in Class_arr) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"attribute\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Attribute))
	}
	{
		const prefix string = ",\"checksum\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Checksum))
	}
	{
		const prefix string = ",\"example\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Examples).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"query_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Query_count))
	}
	{
		const prefix string = ",\"ts_max\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Ts_max))
	}
	{
		const prefix string = ",\"ts_min\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Ts_min))
	}
	{
		const prefix string = ",\"metrics\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Metrics).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Class_arr) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c8071dEncodeGotestJsondataClass(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Class_arr) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c8071dEncodeGotestJsondataClass(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Class_arr) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c8071dDecodeGotestJsondataClass(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Class_arr) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c8071dDecodeGotestJsondataClass(l, v)
}
